package main.util.codetester;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Properties;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;

import main.util.filedetails.FileDetails;
import main.util.sshcommands.UsingJsch;


/*
 * - Partial marking System
 * - Destroy .class, .txt, .exe files
 */
public class FileOutputMatcher {
	static String path_output="";//path to the output file generated by the compiler
	static String path_check="";//Path to the actual output file uploaded by the professor
	static int m;
	static String ip;
	static String username;
	static String password;
	static int port=22;
	public FileOutputMatcher(String out,String check,int m){
		
		path_output = out;
		path_check = check;
		this.m = m;
		Properties prop=new Properties();
		try {
			prop.load(new FileInputStream("Files//SSHinfo.properties"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ip=prop.getProperty("ip");
		username=prop.getProperty("username");
		password=prop.getProperty("password");
	}

	public int CheckOutputs()throws IOException {
		// TODO Auto-generated method stub
		Session session = null;
        Channel channel = null;
        ChannelSftp channelSftp = null;
        PrintWriter pw=new PrintWriter(System.out);
        try{
        	JSch jsch = new JSch();
            session = jsch.getSession(username, ip, port);
            session.setPassword(password);
            java.util.Properties config = new java.util.Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);
            session.connect();
            channel = session.openChannel("sftp");
            channel.connect();
            channelSftp = (ChannelSftp) channel;
           /* InputStream stream1=channelSftp.get(path_check);
   			BufferedReader reader2=new BufferedReader(new InputStreamReader(stream1));
            InputStream stream=channelSftp.get(path_output);
			BufferedReader reader1=new BufferedReader(new InputStreamReader(stream));
     		*/
            //String actual_output = reader1.readLine(); //This string reads the actual output file
			//String output = reader2.readLine();//This String reads the output file uploaded by the student
			String actual_output = UsingJsch.readingFile(path_output);
			String output = UsingJsch.readingFile(path_check);
            System.out.println("INSIDE FILEOUTPUTMATCHER");
			System.out.println("Actual Output::::\n"+actual_output+"Ends\n"+"Our output::::::\n"+output+"Ends");
			int lineNum=1;//The line being compared
			boolean areEqual=true;
			String actual_array[]=actual_output.split("\n");
			String output_array[]=output.split("\n");
			if(actual_array.length==output_array.length)
			{
				for(int i=0;i<actual_array.length;i++)
				{
					String actual_line=actual_array[i].trim();
					String output_line=output_array[i].trim();
					if(actual_line.equals(output_line))
					{
						continue;
					}
					else
					{
						areEqual=false;
						break;
					}	
				}
			}
			else
			{
				areEqual=false;
			}	
			if(actual_output.equals(output))
				areEqual = true;
	/*		while(actual_output!=null&&output!=null){
				pw.println(actual_output+" "+output);
				if(actual_output.equals(output)){
					//add marks
					areEqual = true;
				}else{
					areEqual = false;
					break;
				}
				actual_output = reader1.readLine();
				output = reader2.readLine();
				lineNum++;
			}*/
	//		reader1.close();
	//		reader2.close();
			if(areEqual){
				System.out.println("Test passed::"+m);
				pw.println("All test cases passed");
				return m;
			}else{
				System.out.println("Test Failed::"+lineNum);
				pw.println("Wrong Outputs at line = "+lineNum);
				return 0;//Confusion on what marks to reward for wrong output
			}
        }catch(Exception exc){
        	pw.println("Error Executing Code");
        	exc.printStackTrace();
        }
        pw.close();
        return 0;
	}
	
	public void DeleteFiles() throws Exception{
		FileDetails fl=new FileDetails();
		fl.deleteSSHFiles(path_output.substring(0, path_output.lastIndexOf("/")+1));
	}
}
